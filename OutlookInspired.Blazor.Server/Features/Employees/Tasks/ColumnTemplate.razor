@inject IJSRuntime JsRuntime
@using OutlookInspired.Module.BusinessObjects
@using OutlookInspired.Blazor.Server.Services
@using OutlookInspired.Blazor.Server.Components;
<div class="container">
    <div class="row">
        <div class="col-md-6 tasks-div">
            @Task.Subject
        </div>
        <div class="col-md-6 text-end" style="font-weight: bold;">
            @Task.DueDate.GetValueOrDefault().ToString("MMMM dd, yyyy")
        </div>
    </div>
    <div class="row">
        <div class="col-md-12 tasks-div">
            @Task.Description
        </div>
    </div>
    <div class="row">
        <div class="col-md-12">
            <ProgressBar ComponentModel="@(new ProgressBarModel{Width=Task.Completion.ToString()})"/>
        </div>
    </div>
</div>
@code {
    [Parameter]
    public GridDataColumnCellDisplayTemplateContext Context { get; set; }

    public EmployeeTask Task => (EmployeeTask)Context.DataItem;
    
    protected override async Task OnAfterRenderAsync(bool firstRender) 
        => await JsRuntime.AddGridColumnTextOverflow(firstRender, "tasks-div");

    public static RenderFragment Create(GridDataColumnCellDisplayTemplateContext context) 
        => @<ColumnTemplate Context="@context"/>;
}

