@using Microsoft.EntityFrameworkCore.Metadata.Internal
@using OutlookInspired.Module.Services.Internal
@implements ISelectedCard
<style>
.card {
      flex: 0 0 auto;  
      margin-right: 16px;  
      max-width: calc(50% - 16px);  
  }
  .ellipsis {
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
      max-width: 100%;
  }
  .col-md-8 p {
      word-wrap: break-word; 
      overflow: hidden;  
      text-overflow: ellipsis;  
      max-width: 100%;  
  }
</style>
<div class="card" @onclick="HandleClickAsync" @ondblclick="HandleDoubleClickAsync" style="@(IsSelected ? "background-color: grey;" : "")" >
  <div class="card-header">
    <strong>@HeaderText</strong>
  </div>
  <div class="card-body">
    <div class="row">
      <div class="col-md-4">
        <img src="@Image" class="img-fluid" alt="Photo">
      </div>
      <div class="col-md-8">
         <div class="col-md-8">
            @foreach (var item in InfoItems){
              <div class="mb-2">
                <small class="text-muted">@item.Key:</small>
                <p class="ellipsis">@((MarkupString)item.Value)</p>
              </div>
            }
          </div>
      </div>
    </div>
  </div>
</div>

@code {

  [Parameter]
  public Dictionary<string, string> InfoItems { get; set; }

  [Parameter]
  public string HeaderText { get; set; }

  [Parameter]
  public string Image { get; set; }

  [Parameter]
  public bool IsSelected { get; set; }

  [Parameter]
  public EventCallback<bool> IsSelectedChanged { get; set; }
  [Parameter]
  public UserControlComponentModel Model { get; set; }
  [Parameter]
  public object CurrentObject { get; set; }

  [CascadingParameter]
  public StackedCardView StackedCardView { get; set; }

  private void HandleDoubleClickAsync(MouseEventArgs e) 
    => Model.ProcessSelectedObject();

  private async Task HandleClickAsync(MouseEventArgs e){
    IsSelected = !IsSelected;
    if (IsSelected){
      Model.SelectedObjects = CurrentObject.YieldItem().ToList();
      StackedCardView.SelectedCards.Add(this);
    }
    else{
      Model.SelectedObjects.Remove(this);
    }
    await IsSelectedChanged.InvokeAsync(IsSelected);
  }



}
