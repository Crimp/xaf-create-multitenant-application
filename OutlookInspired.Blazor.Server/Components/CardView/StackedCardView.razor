@implements IDisposable
@using System.ComponentModel
@using OutlookInspired.Module.Services.Internal
@inject IJSRuntime JsRuntime
<!--suppress CssInvalidHtmlTagReference, CssUnusedSymbol -->
<style>
    dxbl-form-layout-item > div:has(.nested-frame) {    margin-top: 0 !important;}
</style>
<style>
    .store-card-container {
        display: flex;
        flex-direction: row; 
        flex-wrap: wrap; 
        overflow-x: hidden;  
        overflow-y: auto; 
        height: 100vh; 
        align-items: flex-start;  
        align-content: flex-start; 
    }

    .store-card-container > div {
        margin-bottom: 8px;
    }
    
    .store-card-container::-webkit-scrollbar {
        width: 12px;
    }
    
    .store-card-container::-webkit-scrollbar-thumb {
        background-color: darkgrey;
        outline: 1px solid slategrey;
    }
    
    .store-card-container {
        scrollbar-width: thin;
        scrollbar-color: darkgrey slategrey;
    }
</style>

<div class="store-card-container" >
    <CascadingValue Value="this">
        @Content
    </CascadingValue>
</div>

@code {
    protected override void OnInitialized(){
        base.OnInitialized();
        SelectedCards.ListChanged+=SelectedCardsOnListChanged;
    }

    private void SelectedCardsOnListChanged(object sender, ListChangedEventArgs e){
        if (e.ListChangedType != ListChangedType.ItemAdded) return;
        var selectedCard = SelectedCards[e.NewIndex];
        SelectedCards.Where(card => card != selectedCard).ToArray()
            .Do(card =>{
                card.IsSelected = false;
                SelectedCards.Remove(card);
            }).Finally(StateHasChanged).Enumerate();

    }

    
    [Parameter]
    public RenderFragment Content { get; set; }

    public BindingList<ISelectedCard> SelectedCards { get; } = new(){RaiseListChangedEvents = true};
    public void Dispose() => SelectedCards.ListChanged-=SelectedCardsOnListChanged;

}
