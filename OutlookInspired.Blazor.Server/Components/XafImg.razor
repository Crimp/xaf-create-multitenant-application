@using DevExpress.ExpressApp.Blazor.Services
@using OutlookInspired.Module.Services.Internal
@using OutlookInspired.Blazor.Server.Services
@inject IImageUrlService ImageUrlService

@if (Value is byte[] bytes){
    <img src="@(bytes.ToBase64Image())" width="@Width" height="@Height" alt="@AltText" class="xaf-image-cell"/>    
}
else{
    <div @attributes="Attributes" class="xaf-image @CssClass" style="background-color: @(Color ?? "currentColor"); -webkit-mask: url('@_imageUrl'); mask: url('@_imageUrl'); -webkit-mask-position: center; mask-position: center; -webkit-mask-repeat: no-repeat; mask-repeat: no-repeat; @(Size > 0 ? $"height: {Size}px; width: {Size}px; mask-size: {Size}px; -webkit-mask-size: {Size}px;" : "") @Styles"></div>
}

@code{
    private string _imageUrl;

    protected override void OnInitialized(){
        base.OnInitialized();
        if (Value is string imageName){
            _imageUrl = ImageUrlService.GetImageUrl(imageName);
        }
        
    }
    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object> Attributes { get; set; }
    [Parameter]
    public object Value { get; set; }
    [Parameter]
    public int Width { get; set; }
    [Parameter]
    public int Height { get; set; }
    [Parameter]
    public string AltText { get; set; }
    [Parameter]
    public string Styles { get; set; }
    [Parameter]
    public string Color { get; set; }
    [Parameter]
    public int Size { get; set; }
    [Parameter]
    public string CssClass { get; set; }
    
    public static RenderFragment Create(object value,int width,int height,string altText)
        => @<XafImg Value=@value Width=@width Height=@height AltText="@altText" />;
}




