@inject IJSRuntime JS
@using Newtonsoft.Json
@using OutlookInspired.Blazor.Server.Services
@using Microsoft.AspNetCore.Html
@using System.Text.Json
@using System.Text.Json.Nodes
@using OutlookInspired.Blazor.Server.Components.DevExtreme.Maps
@using OutlookInspired.Module.Services.Internal
@implements IAsyncDisposable

<DevExtremeResources ResourcesLoaded="ScriptsLoaded" />

@if(ResourcesLoaded) {
    <div @ref=@Map ></div>
}

@code {
    private InvokeDispatcher _dispatchItemSelection;
    bool ResourcesLoaded { get; set; }
    bool ClientInitializationInProgress { get; set; }
    

    ElementReference Map { get; set; }

    IJSObjectReference ClientModule { get; set; }
    
    IJSObjectReference ClientMap { get; set; }
    [Parameter]
    public Model Model { get; set; }

    
    protected override void OnInitialized(){
        base.OnInitialized();
        _dispatchItemSelection = new InvokeDispatcher(element =>{
            if (element is not JsonElement{ValueKind:JsonValueKind.String } jsonElement) return;
            Model.SelectMapItem(Model.MapSettings.MapItems.First(item => item.City==jsonElement.GetString()));
        });
        
    }

    

    protected sealed override async Task OnAfterRenderAsync(bool firstRender){
        var mapSettings = Model.MapSettings;
        if(ResourcesLoaded && ClientMap == null && !ClientInitializationInProgress){
            ClientInitializationInProgress = true;
            // ClientModule = await JS.InvokeAsync<IJSObjectReference>("import", "./Components/DevExtreme/DevExtremeMap.razor.js");
            // var invokeAsync = await ClientModule.InvokeAsync<object>("GenerateColors",10);
            
            var mapInit = mapSettings.Routes.Any() ? "RouteMapInit" : "SalesMapInit";
            ClientMap = await ClientModule.InvokeAsync<IJSObjectReference>(mapInit, Map, mapSettings, _dispatchItemSelection.DotNetReference());
            ClientInitializationInProgress = false;
        }
        else if (Model.ChangeRouteMode){
            Model.ChangeRouteMode = false;
            await ClientModule.InvokeVoidAsync("updateMapRouteMode", ClientMap, mapSettings.Routes.First().Mode.ToLower());
        }
        else if (Model.ChangePeriod){
            Model.ChangePeriod = false;
            await ClientModule.InvokeVoidAsync("updateDatasource", ClientMap, mapSettings);
        }
        else if (Model.PrintMap){
            Model.PrintMap = false;
            await ClientModule.InvokeVoidAsync("printMap", ClientMap);
        }
    }

    async ValueTask IAsyncDisposable.DisposeAsync() {
        if(ClientMap != null)
            await ClientMap.DisposeAsync();
        if(ClientModule != null)
            await ClientModule.DisposeAsync();
    }

    private async Task ScriptsLoaded(){
        ResourcesLoaded = true;
        if(!ClientInitializationInProgress){
            ClientInitializationInProgress = true;
            ClientModule = await JS.InvokeAsync<IJSObjectReference>("import", "./Components/DevExtreme/DevExtremeMap.razor.js");
            // Model.MapSettings.Palette = ((JsonElement)await ClientModule.InvokeAsync<object>("GenerateColors",Model.MapSettings.Features.Features.Count)).DeSerialize<string[]>();
            ClientInitializationInProgress = false;
        }
    }

}
