@inherits DevExtremeComponent
@using OutlookInspired.Blazor.Server.Services
@using System.Text.Json
@using OutlookInspired.Module.Services.Internal

<div @ref=@Element ></div>

@code {
    static DxMap() => ExtractResource<DxMap>();
    private JsInterop _dispatchItemSelection;
    [Parameter]
    public DxMapModel ComponentModel { get; set; }

    protected override async Task OnInitializedAsync(){
        await base.OnInitializedAsync();
        _dispatchItemSelection = new JsInterop(element =>{
            if (element is not JsonElement{ValueKind:JsonValueKind.String } jsonElement) return;
            // ComponentModel.SelectMapItem(ComponentModel.MapSettings.MapItems.First(item => item.City==jsonElement.GetString()));
        });
    }

    protected override async Task OnAfterRenderClientModuleAsync(){
        var mapSettings = ComponentModel.MapSettings;
        if( ClientObject == null){
            var mapInit = mapSettings.Routes.Any() ? "InitDxMap" : "InitVectorMap";
            ClientObject = await ClientModule.InvokeAsync<IJSObjectReference>(mapInit, Element, mapSettings, _dispatchItemSelection.DotNetReference());
        }
        else if (ComponentModel.ChangeRouteMode){
            ComponentModel.ChangeRouteMode = false;
            await ClientModule.InvokeVoidAsync("updateMapRouteMode", ClientObject, mapSettings.Routes.First().Mode.FirstCharacterToLower());
        }
        else if (ComponentModel.ChangePeriod){
            ComponentModel.ChangePeriod = false;
            await ClientModule.InvokeVoidAsync("updateDatasource", ClientObject, mapSettings);
        }
        else if (ComponentModel.PrintMap){
            ComponentModel.PrintMap = false;
            await ClientModule.InvokeVoidAsync("printMap", ClientObject);
        }   
    }

}
