@inject IJSRuntime JS
@using Newtonsoft.Json
@using OutlookInspired.Blazor.Server.Services
@using Microsoft.AspNetCore.Html
@using System.Text.Json
@using System.Text.Json.Nodes
@using OutlookInspired.Module.Services.Internal
@implements IAsyncDisposable

<DevExtremeResources ResourcesLoaded="@(() => ResourcesLoaded = true)" />

@if(ResourcesLoaded) {
    <div @ref=@Map ></div>
}

@code {
    private InvokeDispatcher _invokeDispatcher;
    bool ResourcesLoaded { get; set; }
    bool ClientInitializationInProgress { get; set; }
    

    ElementReference Map { get; set; }

    IJSObjectReference ClientModule { get; set; }
    
    IJSObjectReference ClientMap { get; set; }
    [Parameter]
    public Model Model { get; set; }

    protected override void OnInitialized(){
        base.OnInitialized();
        _invokeDispatcher = new InvokeDispatcher(Update);
    }

    private void Update(object element){
        if (element is JsonElement jsonElement && jsonElement.ValueKind == JsonValueKind.String){
            Model.SelectMapItem(Model.MapSettings.MapItems.First(item => item.City==jsonElement.GetString()));
        }
    }

    protected sealed override async Task OnAfterRenderAsync(bool firstRender) {
        if(ResourcesLoaded && ClientMap == null && !ClientInitializationInProgress){
            ClientInitializationInProgress = true;
            ClientModule = await JS.InvokeAsync<IJSObjectReference>("import", "./Components/DevExtreme/DevExtremeMap.razor.js");
            ClientMap = await ClientModule.InvokeAsync<IJSObjectReference>(Model.MapSettings.Routes.Any()? "RouteMapInit":"SalesMapInit", Map,Model.MapSettings,DotNetObjectReference.Create(_invokeDispatcher));
            ClientInitializationInProgress = false;
        }
        else if (Model.ChangeRouteMode){
            Model.ChangeRouteMode = false;
            await ClientModule.InvokeVoidAsync("updateMapRouteMode", ClientMap, Model.MapSettings.Routes.First().Mode.ToLower());
        }
        else if (Model.ChangePeriod){
            Model.ChangePeriod = false;
            await ClientModule.InvokeVoidAsync("updateSalesPeriod", ClientMap, Model.MapSettings);
        }
        else if (Model.PrintMap){
            Model.PrintMap = false;
            await ClientModule.InvokeVoidAsync("printMap", ClientMap);
        }
    }

    async ValueTask IAsyncDisposable.DisposeAsync() {
        if(ClientMap != null)
            await ClientMap.DisposeAsync();
        if(ClientModule != null)
            await ClientModule.DisposeAsync();
    }
}
