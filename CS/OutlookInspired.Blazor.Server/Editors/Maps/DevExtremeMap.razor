@implements IAsyncDisposable
@inject IJSRuntime JSRuntime
<div @ref="_mapElement"></div>

@code {
    private IJSObjectReference _mapModule;
    private IJSObjectReference _map;
    private ElementReference _mapElement;
    private DotNetObjectReference<DevExtremeMap> _dotNetHelper;
    
    protected override async Task OnAfterRenderAsync(bool firstRender){
        if (firstRender){
            _dotNetHelper = DotNetObjectReference.Create(this);
            _mapModule = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./Editors/Maps/DevExtremeMap.razor.js");
        }

        if (_map == null){
            var layers = Layers.Select(layer => layer.GetType().GetProperties()
                .ToDictionary(prop => FirstCharacterToLower(prop.Name), prop => prop.GetValue(layer)));
            var customAttributes = CustomAttributes.Select(FirstCharacterToLower).ToArray();
            _map = await _mapModule.InvokeAsync<IJSObjectReference>("addMapToElement", _mapElement,Height,layers,
                Bounds,customAttributes,Annotations,  _dotNetHelper);
        }
    }
    
    string FirstCharacterToLower(string str) =>
        string.IsNullOrEmpty(str) || char.IsLower(str, 0) ? str : char.ToLowerInvariant(str[0]) + str.Substring(1);

    [Parameter][EditorRequired]
    public IEnumerable<BaseLayer> Layers{ get; set; }
    [Parameter]
    public double[] Bounds{ get; set; }
    [Parameter]
    public string Height{ get; set; }
    [Parameter]
    public string[] CustomAttributes{ get; set; }
    [Parameter]
    public EventCallback<string[]> SelectionChanged { get; set; }
    [Parameter]
    public List<Annotation> Annotations { get; set; }
    
    public void Refresh(){
        _mapModule.InvokeVoidAsync("dispose", _mapElement);
        _map = null;
    }

    [JSInvokable]
    public async Task OnSelectionChanged(string[] keys)
        => await SelectionChanged.InvokeAsync(keys);
    
    public async ValueTask DisposeAsync(){
        if (_map is not null) await _map.DisposeAsync();
        if (_mapModule is not null) await _mapModule.DisposeAsync();
        _dotNetHelper?.Dispose();
    }

}