@inject IJSRuntime JSRuntime
@implements IAsyncDisposable;
@using System.Linq.Expressions


<div @ref="_pieChartDiv">
    <DxPieChart Data="@Data" Diameter="1" InnerDiameter="0.5" StartAngle="0" SegmentDirection="PieChartSegmentDirection.Clockwise" CustomizeSeriesPoint="CustomizeSeriesPoint"
                style="@Style">
        <DxPieChartSeries ValueField="@ValueField" ArgumentField="@ArgumentField" SummaryMethod="@SummaryMethod">
            <DxChartSeriesLabel Visible="true" Position="RelativePosition.Outside" ValueFormat="ChartElementFormat.Thousands(1)">
                <DxChartSeriesLabelConnector Visible="true" />
            </DxChartSeriesLabel>
        </DxPieChartSeries>
        <DxChartTooltip Enabled="true" Position="RelativePosition.Outside">
            <div style="margin: 0.75rem">
                <div class="fw-bold">@context.Point.Argument</div>
                <div>Sales: @($"${context.Point.Value:#,0.}")</div>
            </div>
        </DxChartTooltip>
        <DxChartLegend HorizontalAlignment="HorizontalAlignment.Center" VerticalAlignment="VerticalEdge.Bottom"
                       Position="RelativePosition.Outside" Orientation="Orientation.Horizontal" />
    </DxPieChart>
</div>

@code {
    private ElementReference _pieChartDiv;
    private IJSObjectReference _module;
    [Parameter] public IEnumerable<object> Data { get; set; }
    [Parameter] public Expression<Func<object, string>> ArgumentField { get; set; }
    [Parameter] public Expression<Func<object, decimal>> ValueField { get; set; }
    [Parameter] public Expression<Func<object, string>> NameField { get; set; }
    [Parameter] public Func<IEnumerable<decimal>, decimal> SummaryMethod { get; set; }
    [Parameter] public bool Stick { get; set; }
    [Parameter] public Action<ChartSeriesPointCustomizationSettings> CustomizeSeriesPoint { get; set; }
    [Parameter] public string Style{ get; set; }


    protected override async Task OnAfterRenderAsync(bool firstRender){
        if (!firstRender||!Stick)return;
        _module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./Editors/Charts/MyDxPieChart.razor.js");        
        await _module.InvokeVoidAsync("moveElementOnScroll", _pieChartDiv);
    }


    public async ValueTask DisposeAsync(){
        if (_module == null) return;
        await _module.DisposeAsync();
    }

}
